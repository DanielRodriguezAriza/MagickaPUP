- Modificar el sistema de lectura y escritura para que pueda suceder enteramente a través de las clases MBinaryReader y MBinaryWriter (ej: métodos XnaRead(), XnaReadObject(), XnaReadList(), etc... o cosas así...)
- Mover la lógica de XnaObject para ReadObject y WriteObject dentro de MBinaryReader y MBinaryWriter, además de añadir métodos Read() y Write() genéricos para XnaObjects
- Modificar el sistema de logging para que tenga indentación y el modo debug sea 0 (off) o 1 (on) en vez de tener niveles, porque no tenemos ni warnings ni errors ni ostias. Como ejemplo, añadir métodos logger?.ScopeStart() y logger?.ScopeEnd() o algo parecido.
- Standardise the read / write logging, would need to offer some kind of overload to deal with variables of any type, overload / shadow with new keyword on methods by shadowing the Read, ReadByte, ReadInt32, etc... methods. Or add new ones that take a logger as a parameter and a string field for the name to display for each variable? idk...
- Maybe add some checks so that enum values for magicks and stuff like that are taken as strings and checked against the magicks enum? not sure. Or stuff like magick name strings too, etc...
- Create a --permissive command which allows compilation and decompilation to be permissive toward malformed input XNB and JSON files... (note: what i meant with this was malformed files as in files that contain more fields than what would be allowed to be read by magicka, like including more than 4 damage fields for certain ability types, etc...)
- Add the correct content type readers list to the level model class...
- Separate the logic from individual content type reader from list of content type readers, by creating some kind of PrimaryXnaObject class or something like that...
- Maybe go back to the "everything is an XnaObject" philosophy now that we've reworked plenty of CharacterTemplate's logic to use "proxy" Storage classes?
- MAYBE : Modify the content type readers list getter to return a list/array of index/type enums rather than strings themselves? maybe?
- TODO : Move all of the map related stuff into its own folder, and then rename the "PhysicsEntities" folder to just physics maybe?
- Remove or rework the NULL object appending system when writing XNB files, because that may be needed for some maps to reliably work, but most other entities don't benefit at all from the extra NULL shared resource... for example, Physics entities simply cannot work like that because they rely on a read out of bounds exception to determine whether they have a given flag or not... wtf, why did they do it like this tho??? such an unreliable piece of shit system tbh...
- Maybe Move ModelProperties and other shared types to their own directory?
- Modify (the reader / writer, logger) pairs with the read and write context variables... all throughout the codebase...
- Add numbers to the names of the Packers and Unpackers in the logging process... maybe? or maybe not. Not sure if this is a good idea...
- TODO : Change the logging system so that we can also prevent the overhead of string construction / interpolation when logging is disabled. As of now, even with logging disabled, we still pay the price of string construction...
